{"version":3,"sources":["serviceWorker.js","history.js","PageHome/Store.tsx","PageHome/PageHome.tsx","Page404/Page404.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","createBrowserHistory","ACTION__PAGE_HOME__FORM_FIELD","ACTION__PAGE_HOME__SET_TASKS_COLLECTION","reducers","combineReducers","welcome","state","formField","action","description","type","data","name","value","tasksCollection","connector","connect","statePageHome","PageHome","dispatch","ownProps","actionUpdateFormField","StorePageHome","actionListTasks","db","Dexie","version","stores","tasks","offset","limit","toArray","props","onSubmit","bind","onFormFieldChange","removeTask","e","preventDefault","itemId","parseInt","currentTarget","getAttribute","delete","then","catch","this","trim","add","target","document","body","removeAttribute","classList","collectionReact","length","Fragment","map","item","width","className","data-itemid","id","onClick","autoComplete","onChange","aria-describedby","placeholder","React","Component","withRouter","Page404","store","createStore","router","connectRouter","history","PageHomeReducer","applyMiddleware","routerMiddleware","thunk","ReactDOM","render","StrictMode","path","component","strict","exact","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"qMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0CCjBSC,gB,wFCIFC,EAAwC,wBAExCC,EAAkD,kCAiFxD,IAAMC,EAAWC,YAAgB,CACpCC,QAhFJ,SAAiBC,GAOb,MALqB,qBAAVA,IACPA,EAAQ,WAILA,GA0EPC,UA/BJ,SAAmBD,EAAYE,GAO3B,OANqB,qBAAVF,IAEPA,EAAQ,CACJG,YAAa,KAGbD,EAAOE,MACX,KAAKT,EACD,OAAO,2BAAIK,GAAX,kBAAmBE,EAAOG,KAAKC,KAAOJ,EAAOG,KAAKE,QACtD,QACI,OAAOP,IAqBfQ,gBAjBJ,SAAyBR,EAAYE,GAMjC,MAJqB,qBAAVF,IACPA,EAAQ,IAGRE,EAAOE,OAASR,EACTM,EAAOG,KAIXL,KCxDLS,EAAYC,aAtBM,SAACV,GAIrB,IAAMW,EAA+BX,EAAMY,SAC3C,MAAO,CACHX,UAAWU,EAAcV,UACzBO,gBAAiBG,EAAcH,oBAIZ,SAACK,EAAeC,GACvC,MAAO,CACHC,sBAAuB,SAACT,EAAcC,GAClCM,EDDL,SAA+BP,EAAcC,GAChD,OAAO,SAACM,GAEJA,EAAS,CACLT,KAAMT,EACNU,KAAM,CACFC,OACAC,YCNKS,CAAoCV,EAAMC,KAEvDU,gBAAiB,WACbJ,GDUD,SAACA,GACJ,IAAMK,EAAU,IAAIC,IAAM,mBAC1BD,EAAGE,QAAQ,GAAGC,OAAO,CACjBC,MAAO,sBAEXJ,EAAGI,MACEC,OAAO,GACPC,MAAM,KACNC,SAAQ,SAAUH,GACfT,EAAS,CACLT,KAAMR,EACNS,KAAMiB,IAEVT,EAAS,CACLT,KAAMT,EACNU,KAAM,CACFC,KAAM,cACNC,MAAO,iBCpBzBK,E,kDAEF,WAAYc,GAAa,IAAD,8BACpB,cAAMA,IACDC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBACzB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAJE,E,uDAObG,GAAS,IAAD,OACfA,EAAEC,iBACF,IAAIC,EAAiBC,SAASH,EAAEI,cAAcC,aAAa,gBAErDlB,EAAU,IAAIC,IAAM,mBAC1BD,EAAGE,QAAQ,GAAGC,OAAO,CACjBC,MAAO,sBAEXJ,EAAGI,MAAMe,OAAOJ,GAAQK,MAAK,SAACP,GAC1B,EAAKL,MAAMT,qBACZsB,OAAM,SAACR,S,+BAILA,GAAS,IAAD,OAEb,GADAA,EAAEC,iBAC8C,KAA5CQ,KAAKd,MAAMzB,UAAUE,YAAYsC,OAArC,CAGA,IAAMvB,EAAU,IAAIC,IAAM,mBAC1BD,EAAGE,QAAQ,GAAGC,OAAO,CACjBC,MAAO,sBAGXJ,EAAGI,MAAMoB,IAAI,CACTvC,YAAaqC,KAAKd,MAAMzB,UAAUE,cACnCmC,MAAK,SAACP,GACL,EAAKL,MAAMT,wB,wCAIDc,GACdS,KAAKd,MAAMX,sBAAsBgB,EAAEY,OAAOrC,KAAMyB,EAAEY,OAAOpC,S,0CAIzDqC,SAASC,KAAKC,gBAAgB,SAC9BF,SAASC,KAAKE,UAAUL,IAAI,uBAE5BF,KAAKd,MAAMT,oB,+BAGL,IAAD,OACD+B,EAAkB,KA4BtB,MA3B0C,qBAA/BR,KAAKd,MAAMlB,iBACwB,IAAtCgC,KAAKd,MAAMlB,gBAAgByC,SAC3BD,EAAmB,cAAC,IAAME,SAAP,UAAiBV,KAAKd,MAAMlB,gBAAgB2C,KAAK,SAACC,GACjE,OACI,cAAC,IAAMF,SAAP,UACI,+BAII,6BAAKE,EAAKjD,cACV,oBAAIkD,MAAO,IAAX,SACI,qBAAKC,UAAS,WAAd,SACI,wBAAQA,UAAS,iBACTC,cAAaH,EAAKI,GAClBC,QAAS,EAAK3B,WAFtB,SAGI,mBAAGwB,UAAU,2BAXZF,EAAKI,UAwBtC,cAAC,IAAMN,SAAP,UACI,qBAAKI,UAAS,OAAd,SACI,sBAAKA,UAAS,gBAAd,UACI,oBAAIA,UAAS,cAAb,+BACA,sBAAM3B,SAAUa,KAAKb,SAArB,SACI,qBAAK2B,UAAU,aAAf,SACI,uBAAOlD,KAAK,OACLkD,UAAU,0BACVI,aAAY,MACZF,GAAG,qBACHG,SAAUnB,KAAKX,kBACftB,MAAOiC,KAAKd,MAAMzB,UAAUE,YAC5BG,KAAI,cACJsD,mBAAiB,YACjBC,YAAY,uCAG3B,uBAAOP,UAAU,QAAjB,SACI,gCACCN,iB,GApGNc,IAAMC,WA8GdC,cAAWvD,EAAUG,ICjI9BqD,E,kLAGErB,SAASC,KAAKC,gBAAgB,SAC9BF,SAASC,KAAKE,UAAUL,IAAI,yB,+BAI5B,OACI,cAAC,IAAMQ,SAAP,UACI,wD,GAVMY,IAAMC,WA0BbC,cAAWtD,aARF,SAACV,GACrB,MAAO,MAGgB,SAACa,EAAeC,GACvC,MAAO,KAGeJ,CAA6CuD,ICfjEC,EAAQC,YACVrE,YAAgB,CACZsE,OAAQC,YAAcC,GACtB1D,SAAU2D,IAEdC,YAAgBC,YAAiBH,GAAUI,MAG/CC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACI,cAAC,IAAD,CAAiBI,QAASA,EAA1B,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOQ,KAAK,IAAeC,UAAWnE,EAAUoE,QAAM,EAACC,OAAK,GAAxC,QADxB,IAGI,cAAC,IAAD,CAAiBF,UAAWd,GAAjB,gBAK3BrB,SAASsC,eAAe,SLwFtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ecb2f3f4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","import { combineReducers } from 'redux';\nimport { ReduxAction } from \"./Types\";\nimport * as Axios from \"axios\";\nimport Dexie from \"dexie\";\n\nexport const ACTION__PAGE_HOME__FORM_FIELD: string = 'page_home__form_field';\nexport const ACTION__PAGE_HOME__GET_TASKS_LIST: string = 'page_home__get_tasks_list';\nexport const ACTION__PAGE_HOME__SET_TASKS_COLLECTION: string = 'page_home__set_tasks_collection';\n\nfunction welcome(state: any) {\n    /* Set default value */\n    if (typeof state === 'undefined') {\n        state = 'Welcome';\n    }\n\n    /* Default value. */\n    return state;\n}\n\n/* Action Update Form Fields */\nexport function actionUpdateFormField(name: string, value: string) {\n    return (dispatch: any) => {\n\n        dispatch({\n            type: ACTION__PAGE_HOME__FORM_FIELD,\n            data: {\n                name,\n                value\n            }\n        });\n    };\n}\n\nexport function actionListTasks() {\n    return (dispatch: any) => {\n        const db: any = new Dexie('MiniTaskManager');\n        db.version(1).stores({\n            tasks: '++id, description'\n        });\n        db.tasks\n            .offset(0)\n            .limit(100)\n            .toArray(function (tasks: any) {\n                dispatch({\n                    type: ACTION__PAGE_HOME__SET_TASKS_COLLECTION,\n                    data: tasks\n                });\n                dispatch({\n                    type: ACTION__PAGE_HOME__FORM_FIELD,\n                    data: {\n                        name: 'description',\n                        value: ''\n                    }\n                });\n            });\n    };\n}\n\n/* Reducer */\nfunction formField(state: any, action: ReduxAction) {\n    if (typeof state === 'undefined') {\n        /* Default value for Form fields. */\n        state = {\n            description: ''\n        };\n    }\n    switch (action.type) {\n        case ACTION__PAGE_HOME__FORM_FIELD:\n            return {...state, [action.data.name]: action.data.value};\n        default:\n            return state;\n    }\n}\n\nfunction tasksCollection(state: any, action: ReduxAction) {\n    /* Set default value */\n    if (typeof state === 'undefined') {\n        state = [];\n    }\n\n    if (action.type === ACTION__PAGE_HOME__SET_TASKS_COLLECTION) {\n        return action.data;\n    }\n\n    /* Default value. */\n    return state;\n}\n\nexport const reducers = combineReducers({\n    welcome,\n    formField,\n    tasksCollection\n});\n\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { withRouter } from \"react-router\";\nimport * as StorePageHome from \"./Store\";\nimport { OwnProps, StatePageHome, Task, TaskPseudo } from \"./Types\";\nimport Dexie from \"dexie\";\n\nconst mapStateToProps = (state: any): {\n    formField: TaskPseudo,\n    tasksCollection: Task[]\n} => {\n    const statePageHome: StatePageHome = state.PageHome;\n    return {\n        formField: statePageHome.formField,\n        tasksCollection: statePageHome.tasksCollection\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any, ownProps: OwnProps) => {\n    return {\n        actionUpdateFormField: (name: string, value: string) => {\n            dispatch(StorePageHome.actionUpdateFormField(name, value))\n        },\n        actionListTasks: () => {\n            dispatch(StorePageHome.actionListTasks())\n        },\n    };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nclass PageHome extends React.Component<ConnectedProps<typeof connector>> {\n\n    constructor(props: any) {\n        super(props);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onFormFieldChange = this.onFormFieldChange.bind(this);\n        this.removeTask = this.removeTask.bind(this);\n    }\n\n    removeTask(e: any) {\n        e.preventDefault();\n        let itemId: number = parseInt(e.currentTarget.getAttribute('data-itemid'));\n\n        const db: any = new Dexie('MiniTaskManager');\n        db.version(1).stores({\n            tasks: '++id, description'\n        });\n        db.tasks.delete(itemId).then((e: any) => {\n            this.props.actionListTasks();\n        }).catch((e: any) => {\n        });\n    }\n\n    onSubmit(e: any) {\n        e.preventDefault();\n        if (this.props.formField.description.trim() === '') {\n            return;\n        }\n        const db: any = new Dexie('MiniTaskManager');\n        db.version(1).stores({\n            tasks: '++id, description'\n        });\n\n        db.tasks.add({\n            description: this.props.formField.description,\n        }).then((e: any) => {\n            this.props.actionListTasks();\n        });\n    }\n\n    onFormFieldChange(e: any) {\n        this.props.actionUpdateFormField(e.target.name, e.target.value);\n    }\n\n    componentDidMount() {\n        document.body.removeAttribute('class');\n        document.body.classList.add('component-page-home');\n\n        this.props.actionListTasks();\n    }\n\n    render() {\n        let collectionReact = null;\n        if (typeof this.props.tasksCollection !== 'undefined') {\n            if (this.props.tasksCollection.length !== 0) {\n                collectionReact = (<React.Fragment>{this.props.tasksCollection.map( (item) => {\n                    return (\n                        <React.Fragment key={item.id}>\n                            <tr>\n                                {/*<td width={50}>*/}\n                                {/*    <input type={`checkbox`} />*/}\n                                {/*</td>*/}\n                                <td>{item.description}</td>\n                                <td width={170}>\n                                    <div className={`btn-case`}>\n                                        <button className={`btn btn-danger`}\n                                                data-itemid={item.id}\n                                                onClick={this.removeTask}>\n                                            <i className=\"las la-trash\"></i>\n                                        </button>\n                                    </div>\n\n                                </td>\n                            </tr>\n                        </React.Fragment>\n                    );\n                })}</React.Fragment>);\n            }\n        }\n\n        return (\n            <React.Fragment>\n                <div className={`main`}>\n                    <div className={`inner-wrapper`}>\n                        <h1 className={`header-text`}>Mini Task Manager</h1>\n                        <form onSubmit={this.onSubmit}>\n                            <div className=\"form-group\">\n                                <input type=\"text\"\n                                       className=\"form-control task-field\"\n                                       autoComplete={`off`}\n                                       id=\"exampleInputEmail1\"\n                                       onChange={this.onFormFieldChange}\n                                       value={this.props.formField.description}\n                                       name={`description`}\n                                       aria-describedby=\"emailHelp\"\n                                       placeholder=\"Write task description here...\" />\n                            </div>\n                        </form>\n                        <table className=\"table\">\n                            <tbody>\n                            {collectionReact}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default withRouter(connector(PageHome));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router\";\n\ninterface RootState {\n    isOn: boolean\n}\n\ninterface OwnProps {\n\n}\n\nclass Page404 extends React.Component {\n\n    componentDidMount() {\n        document.body.removeAttribute('class');\n        document.body.classList.add('component-page-home');\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1>Hello home page!</h1>\n            </React.Fragment>\n        );\n    }\n}\n\n\n\nconst mapStateToProps = (state: RootState) => {\n    return {};\n};\n\nconst mapDispatchToProps = (dispatch: any, ownProps: OwnProps) => {\n    return {};\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Page404));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport thunk from 'redux-thunk';\nimport history from \"./history\";\nimport './index.scss';\nimport {\n    ConnectedRouter,\n    connectRouter,\n    routerMiddleware\n} from 'connected-react-router';\n\n/* Components */\nimport PageHome from \"./PageHome/PageHome\";\nimport Page404 from \"./Page404/Page404\";\n\n/* Reducers */\nimport { reducers as PageHomeReducer } from \"./PageHome/Store\";\n\n/* Create store. */\nconst store = createStore(\n    combineReducers({\n        router: connectRouter(history),\n        PageHome: PageHomeReducer\n    }),\n    applyMiddleware(routerMiddleware(history), thunk)\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <Switch>\n                    <Route path=\"/\" key=\"home\" component={PageHome} strict exact/>,\n\n                    <Route key=\"404\" component={Page404} />\n                </Switch>\n            </ConnectedRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}